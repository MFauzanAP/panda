{
  "content": "import type { CssProperty, SystemStyleObject } from './system-types'\r\nimport type { TokenCategory } from '../tokens'\r\n\r\ntype Primitive = string | number | boolean | null | undefined\r\ntype LiteralUnion<T, K extends Primitive = string> = T | (K & Record<never, never>)\r\n\r\nexport type PatternProperty =\r\n  | { type: 'property'; value: CssProperty }\r\n  | { type: 'enum'; value: string[] }\r\n  | { type: 'token'; value: TokenCategory; property?: CssProperty }\r\n  | { type: 'string' | 'boolean' | 'number' }\r\n\r\nexport interface PatternHelpers {\r\n  map: (value: any, fn: (value: string) => string | undefined) => any\r\n}\r\n\r\nexport type PatternProperties = Record<string, PatternProperty>\r\n\r\ntype Props<T> = Record<LiteralUnion<keyof T>, any>\r\n\r\nexport interface PatternConfig<T extends PatternProperties = PatternProperties> {\r\n  /**\r\n   * The description of the pattern. This will be used in the JSDoc comment.\r\n   */\r\n  description?: string\r\n  /**\r\n   * The JSX element rendered by the pattern\r\n   * @default 'div'\r\n   */\r\n  jsxElement?: string\r\n  /**\r\n   * The properties of the pattern.\r\n   */\r\n  properties?: T\r\n  /**\r\n   * The css object this pattern will generate.\r\n   */\r\n  transform?: (props: Props<T>, helpers: PatternHelpers) => SystemStyleObject\r\n  /**\r\n   * The jsx element name this pattern will generate.\r\n   */\r\n  jsxName?: string\r\n  /**\r\n   * The jsx elements to track for this pattern. Can be string or Regexp.\r\n   *\r\n   * @default capitalize(pattern.name)\r\n   * @example ['Button', 'Link', /Button$/]\r\n   */\r\n  jsx?: Array<string | RegExp>\r\n  /**\r\n   * Whether to only generate types for the specified properties.\r\n   * This will disallow css properties\r\n   */\r\n  strict?: boolean\r\n  /**\r\n   * @experimental\r\n   * Disallow certain css properties for this pattern\r\n   */\r\n  blocklist?: LiteralUnion<CssProperty>[]\r\n}\r\n"
}