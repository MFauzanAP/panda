{
  "content": "import type { SystemStyleObject, DistributiveOmit } from './system-types'\r\n\r\ntype Pretty<T> = { [K in keyof T]: T[K] } & {}\r\n\r\ntype StringToBoolean<T> = T extends 'true' | 'false' ? boolean : T\r\n\r\nexport type RecipeVariantRecord = Record<any, Record<any, SystemStyleObject>>\r\n\r\nexport type RecipeSelection<T extends RecipeVariantRecord> = keyof any extends keyof T\r\n  ? {}\r\n  : {\r\n      [K in keyof T]?: StringToBoolean<keyof T[K]>\r\n    }\r\n\r\nexport type RecipeVariantFn<T extends RecipeVariantRecord> = (props?: RecipeSelection<T>) => string\r\n\r\nexport type RecipeVariantProps<\r\n  T extends RecipeVariantFn<RecipeVariantRecord> | SlotRecipeVariantFn<string, SlotRecipeVariantRecord<string>>,\r\n> = Pretty<Parameters<T>[0]>\r\n\r\ntype RecipeVariantMap<T extends RecipeVariantRecord> = {\r\n  [K in keyof T]: Array<keyof T[K]>\r\n}\r\n\r\n/* -----------------------------------------------------------------------------\r\n * Recipe / Standard\r\n * -----------------------------------------------------------------------------*/\r\n\r\nexport interface RecipeRuntimeFn<T extends RecipeVariantRecord> extends RecipeVariantFn<T> {\r\n  __type: RecipeSelection<T>\r\n  variantKeys: (keyof T)[]\r\n  variantMap: RecipeVariantMap<T>\r\n  raw: (props?: RecipeSelection<T>) => SystemStyleObject\r\n  config: RecipeConfig<T>\r\n  splitVariantProps<Props extends RecipeSelection<T>>(\r\n    props: Props,\r\n  ): [RecipeSelection<T>, Pretty<DistributiveOmit<Props, keyof T>>]\r\n}\r\n\r\ntype OneOrMore<T> = T | Array<T>\r\n\r\nexport type RecipeCompoundSelection<T> = {\r\n  [K in keyof T]?: OneOrMore<StringToBoolean<keyof T[K]>>\r\n}\r\n\r\nexport type RecipeCompoundVariant<T> = T & {\r\n  css: SystemStyleObject\r\n}\r\n\r\nexport interface RecipeDefinition<T extends RecipeVariantRecord> {\r\n  /**\r\n   * The base styles of the recipe.\r\n   */\r\n  base?: SystemStyleObject\r\n  /**\r\n   * The multi-variant styles of the recipe.\r\n   */\r\n  variants?: T\r\n  /**\r\n   * The default variants of the recipe.\r\n   */\r\n  defaultVariants?: RecipeSelection<T>\r\n  /**\r\n   * The styles to apply when a combination of variants is selected.\r\n   */\r\n  compoundVariants?: Pretty<RecipeCompoundVariant<RecipeCompoundSelection<T>>>[]\r\n}\r\n\r\nexport type RecipeCreatorFn = <T extends RecipeVariantRecord>(config: RecipeDefinition<T>) => RecipeRuntimeFn<T>\r\n\r\ninterface RecipeConfigMeta {\r\n  /**\r\n   * The name of the recipe.\r\n   */\r\n  className: string\r\n  /**\r\n   * The description of the recipe. This will be used in the JSDoc comment.\r\n   */\r\n  description?: string\r\n  /**\r\n   * The jsx elements to track for this recipe. Can be string or Regexp.\r\n   *\r\n   * @default capitalize(recipe.name)\r\n   * @example ['Button', 'Link', /Button$/]\r\n   */\r\n  jsx?: Array<string | RegExp>\r\n}\r\n\r\nexport interface RecipeConfig<T extends RecipeVariantRecord = RecipeVariantRecord>\r\n  extends RecipeDefinition<T>,\r\n    RecipeConfigMeta {}\r\n\r\n/* -----------------------------------------------------------------------------\r\n * Recipe / Slot\r\n * -----------------------------------------------------------------------------*/\r\n\r\ntype SlotRecord<S extends string, T> = Partial<Record<S, T>>\r\n\r\nexport type SlotRecipeVariantRecord<S extends string> = Record<any, Record<any, SlotRecord<S, SystemStyleObject>>>\r\n\r\nexport type SlotRecipeVariantFn<S extends string, T extends RecipeVariantRecord> = (\r\n  props?: RecipeSelection<T>,\r\n) => SlotRecord<S, string>\r\n\r\nexport interface SlotRecipeRuntimeFn<S extends string, T extends SlotRecipeVariantRecord<S>>\r\n  extends SlotRecipeVariantFn<S, T> {\r\n  raw: (props?: RecipeSelection<T>) => Record<S, SystemStyleObject>\r\n  variantKeys: (keyof T)[]\r\n  variantMap: RecipeVariantMap<T>\r\n  splitVariantProps<Props extends RecipeSelection<T>>(props: Props): [RecipeSelection<T>, Pretty<Omit<Props, keyof T>>]\r\n}\r\n\r\nexport type SlotRecipeCompoundVariant<S extends string, T> = T & {\r\n  css: SlotRecord<S, SystemStyleObject>\r\n}\r\n\r\nexport interface SlotRecipeDefinition<S extends string, T extends SlotRecipeVariantRecord<S>> {\r\n  /**\r\n   * The parts/slots of the recipe.\r\n   */\r\n  slots: S[] | Readonly<S[]>\r\n  /**\r\n   * The base styles of the recipe.\r\n   */\r\n  base?: SlotRecord<S, SystemStyleObject>\r\n  /**\r\n   * The multi-variant styles of the recipe.\r\n   */\r\n  variants?: T\r\n  /**\r\n   * The default variants of the recipe.\r\n   */\r\n  defaultVariants?: RecipeSelection<T>\r\n  /**\r\n   * The styles to apply when a combination of variants is selected.\r\n   */\r\n  compoundVariants?: Pretty<SlotRecipeCompoundVariant<S, RecipeCompoundSelection<T>>>[]\r\n}\r\n\r\nexport type SlotRecipeCreatorFn = <S extends string, T extends SlotRecipeVariantRecord<S>>(\r\n  config: SlotRecipeDefinition<S, T>,\r\n) => SlotRecipeRuntimeFn<S, T>\r\n\r\nexport type SlotRecipeConfig<\r\n  S extends string = string,\r\n  T extends SlotRecipeVariantRecord<S> = SlotRecipeVariantRecord<S>,\r\n> = SlotRecipeDefinition<S, T> & RecipeConfigMeta\r\n"
}